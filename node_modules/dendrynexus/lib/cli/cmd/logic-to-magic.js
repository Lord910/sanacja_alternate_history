/* dendry
 * http://github.com/idmillington/dendry
 *
 * MIT License
 */
/*jshint indent:2 */
(function() {
  'use strict';

  var logic = require('../../parsers/logic');
  var utils = require('../utils');

  // ----------------------------------------------------------------------
  // Logic-to-Magic: Displays the javascript that will be generated from
  // a source string of Logic.
  // ----------------------------------------------------------------------

  var cmdLogic2Magic = new utils.Command('logic-to-magic');
  cmdLogic2Magic.createArgumentParser = function(subparsers) {
    var parser = subparsers.addParser(this.name, {
      // No help to avoid this being displayed in top level help.
      description: 'Functionality in Dendry can be defined in either ' +
        'raw Javascript (known as Magic) or in a simple custom expression ' +
        'language (called Logic), designed for non-programmers. Logic is ' +
        'converted into Magic for execution. To debug problems with Logic, ' +
        'this command allows you to see the Magic that will be generated by ' +
        'source Logic code.'
    });
    parser.addArgument(['logic'], {
      help: 'The logic code to convert.'
    });
    var typeGroup = parser.addMutuallyExclusiveGroup({required: true});
    typeGroup.addArgument(['-p', '--predicate'], {
      defaultValue: false,
      action: 'storeTrue',
      help: 'Interpret the Logic as a predicate: a true/false test.'
    });
    typeGroup.addArgument(['-a', '--actions'], {
      defaultValue: false,
      action: 'storeTrue',
      help: 'Interpret the Logic as a series of actions.'
    });
    typeGroup.addArgument(['-e', '--expression'], {
      defaultValue: false,
      action: 'storeTrue',
      help: 'Interpret the Logic as an expression: returning a number.'
    });
  };
  cmdLogic2Magic.run = function(args, callback) {
    var root = args.predicate ?
      'predicate' :
      (args.expression ? 'expression' : 'actions');
    logic.getMagic(args.logic, root, function(err, magic) {
      if (err) {
        callback(err);
      } else {
        console.log(magic);
        callback();
      }
    });
  };

  module.exports = {
    cmd: cmdLogic2Magic
  };
}());
